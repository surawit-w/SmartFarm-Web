{"version":3,"sources":["logo.svg","App.js","qrCode.js","Route.js","serviceWorker.js","index.js"],"names":["module","exports","liff","window","App","props","changeHandler","e","setState","target","name","value","state","line_id","line_pic","loading","initialize","bind","console","log","init","liffId","a","getProfile","profile","userId","pictureUrl","verifyUID","addEventListener","this","document","title","class","width","src","disabled","placeholder","type","maxLength","Component","scanCode","then","result","stringifiedResult","JSON","stringify","alert","getElementById","textContent","qrCode","MainRoute","exact","patch","component","QRCode","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,sMCKrCC,G,kBAAOC,OAAOD,MAECE,E,YAcnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAeRC,cAAgB,SAAAC,GACd,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAf1C,EAAKC,MAAQ,CACXC,QAAS,GAETC,SAAU,GACVC,SAAS,GAEX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARD,E,0EAbL,IAAD,OACXC,QAAQC,IAAI,gCACZjB,EAAKkB,KAAK,CAAEC,OAAQ,uBAApB,sBAA6C,4BAAAC,EAAA,sEACvBpB,EAAKqB,aADkB,OACvCC,EADuC,OAE3C,EAAKhB,SAAS,CACZK,QAASW,EAAQC,OACjBX,SAAUU,EAAQE,aAEpBR,QAAQC,IAAI,+CACZ,EAAKQ,YAPsC,gD,yDAuB7CxB,OAAOyB,iBAAiB,OAAQC,KAAKb,YACrCc,SAASC,MAAQ,a,+BA2CT,IAAD,EACgCF,KAAKjB,MAApCC,EADD,EACCA,QAAkBC,GADnB,EACUC,QADV,EACmBD,UAC1B,OACE,yBAAKkB,MAAM,YACT,wJACA,6BACE,yBAAKC,MAAM,MAAMC,IAAKpB,KAExB,2BACEkB,MAAM,UACNrB,MAAO,YAAcE,EACrBH,KAAM,YAAcG,EACpBsB,UAAQ,IAGV,iGACA,2BAAOH,MAAM,cAAcI,YAAY,sEAAeC,KAAK,SAC3D,6GACA,2BAAOL,MAAM,eAAeI,YAAY,aAAaE,UAAU,OAC/D,4BAAQN,MAAM,UAAd,+D,GAzFyBO,aCL3BrC,EAAOC,OAAOD,KAEpB,SAASsC,IACPtC,EAAKsC,WAAWC,MAAK,SAAAC,GACnB,IAAMC,EAAoBC,KAAKC,UAAUH,GACzCI,MAAMH,GACNb,SAASiB,eAAe,YAAYC,YAAcL,K,IAIjCM,E,iLAEjB,OAAOT,M,GAFyBD,aCPfW,E,iLAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,MAAM,IAAIC,UAAWjD,IAClC,kBAAC,IAAD,CAAO+C,OAAK,EAACC,MAAM,UAAUC,UAAWC,U,GANXf,aCOnBgB,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAW9B,SAASiB,eAAe,SD0H7C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.703a2f34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { async } from \"q\";\n\nconst liff = window.liff;\n\nexport default class App extends Component {\n  initialize() {\n    console.log(\"Entering initialize state...\");\n    liff.init({ liffId: \"1610155283-WqRpOKwB\" }, async () => {\n      let profile = await liff.getProfile();\n      this.setState({\n        line_id: profile.userId,\n        line_pic: profile.pictureUrl\n      });\n      console.log(\"Get UID completed going to register page...\");\n      this.verifyUID();\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      line_id: \"\",\n      // line_id: \"U50240c7e4d230739b2a4343c4a1da542\",\n      line_pic: \"\",\n      loading: false\n    };\n    this.initialize = this.initialize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", this.initialize);\n    document.title = \"Register\";\n  }\n\n  changeHandler = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  // constructor(props) {\n  //   super(props);\n\n  //   this.state = {\n  //     userLineID: \"\",\n  //     pictureUrl: \"\"\n  //   };\n  // }\n\n  // getProfile() {\n  //   liff.init(async () => {\n  //     let getProfile = await liff.getProfile();\n  //     this.setState({\n  //       userLineID: getProfile.userId,\n  //       pictureUrl: getProfile.pictureUrl\n  //     });\n  //   });\n  // }\n\n  // sendMessage() {\n  //   liff\n  //     .sendMessage([\n  //       {\n  //         type: \"text\",\n  //         text: \"Hi LIFF\"\n  //       }\n  //     ])\n  //     .then(() => {\n  //       liff.closeWindow();\n  //     });\n  // }\n\n  // clossLIFF() {\n  //   liff.closeWindow();\n  // }\n\n  render() {\n    const { line_id, loading, line_pic } = this.state;\n    return (\n      <div class=\"App font\">\n        <h1>ลงทะเบียนเกษตรกรใหม่</h1>\n        <div>\n          <img width=\"40%\" src={line_pic}></img>\n        </div>\n        <input\n          class=\"line-id\"\n          value={\"Line ID: \" + line_id}\n          name={\"Line ID: \" + line_id}\n          disabled\n        />\n\n        <p>ชื่อเกษตรกร</p>\n        <input class=\"farmer-name\" placeholder=\"ชื่อ-นามสกุล\" type=\"text\" />\n        <p>เบอร์โทรศัพท์</p>\n        <input class=\"farmer-phone\" placeholder=\"0803205554\" maxLength=\"10\" />\n        <button class=\"button\">ลงทะเบียน</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst liff = window.liff;\n\nfunction scanCode() {\n  liff.scanCode().then(result => {\n    const stringifiedResult = JSON.stringify(result);\n    alert(stringifiedResult);\n    document.getElementById(\"scanCode\").textContent = stringifiedResult;\n  });\n}\n\nexport default class qrCode extends Component {\n  render() {\n    return scanCode;\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport App from \"./App.js\";\nimport QRCode from \"./qrCode.js\";\n\nexport default class MainRoute extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact patch=\"/\" component={App} />\n          <Route exact patch=\"/qrcode\" component={QRCode} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Route from \"./Route.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Route />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}