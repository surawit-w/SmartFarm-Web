{"version":3,"sources":["logo.svg","service.js","App.js","qrCode.js","Route.js","serviceWorker.js","index.js"],"names":["module","exports","ip","POST","path","obj","formData","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","credentials","then","response","json","catch","err","liff","window","App","props","handleChange","a","target","value","name","console","log","state","setState","changeHandler","e","sendInfo","tel","lineId","line_id","test","alert","status","line_pic","loading","user_info_arr","initialize","bind","init","liffId","getProfile","profile","userId","pictureUrl","verifyUID","addEventListener","this","document","title","class","width","src","disabled","required","placeholder","type","onChange","maxLength","id","onClick","Component","qrCode","onclick","MainRoute","patch","component","qrcode","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3d6a61e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// export const _ip = \"http://localhost:3053\";\n// export const _ip = 'http://172.16.63.9:4000';\n\nexport const _ip = \"https://line-smartfarm-api.herokuapp.com\";\n\nexport const ip = _ip + \"\";\n\nexport const GET = path => {\n  return new Promise((resolve, reject) => {\n    fetch(ip + path, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    })\n      .then(response => response.json())\n      .then(json => resolve(json))\n      .catch(err => reject(err));\n  });\n};\n\nexport const POST = (path, obj, formData) => {\n  return new Promise((resolve, reject) => {\n    fetch(ip + path, {\n      method: \"POST\",\n      headers: formData\n        ? {}\n        : {\n            \"Content-Type\": \"application/json\"\n          },\n      body: formData ? obj : JSON.stringify(obj),\n      credentials: \"include\"\n    })\n      .then(response => response.json())\n      .then(json => resolve(json))\n      .catch(err => reject(err));\n  });\n};\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { async } from \"q\";\nimport { GET, POST } from \"./service\";\n\nconst liff = window.liff;\n\nfunction SignIn(props) {\n  const { classes } = props;\n\n  // const [name] = useState(\"\");\n  // const [tel] = useState(\"\");\n  // const [id] = useState(\"\");\n}\n\nexport default class App extends Component {\n  initialize() {\n    console.log(\"Entering initialize state...\");\n    liff.init({ liffId: \"1610155283-WqRpOKwB\" }, async () => {\n      let profile = await liff.getProfile();\n      this.setState({\n        line_id: profile.userId,\n        line_pic: profile.pictureUrl\n      });\n      console.log(\"Get UID completed going to register page...\");\n      this.verifyUID();\n    });\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      line_id: \"\",\n      line_pic: \"\",\n      name: \"\",\n      tel: \"\",\n      loading: false,\n      user_info_arr: []\n    };\n    this.initialize = this.initialize.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"load\", this.initialize);\n    document.title = \"Register\";\n  }\n\n  handleChange = async ({ target: { value, name } }) => {\n    await this.setState(\n      {\n        [name]: value\n      },\n      await console.log(this.state)\n    );\n  };\n\n  changeHandler = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  sendInfo = async () => {\n    let name = this.state.name;\n    let tel = this.state.tel;\n    let lineId = this.state.line_id;\n    let test = await POST(\"/sendInfo\", { name, tel, lineId });\n    console.log(test);\n    alert(test.status);\n  };\n\n  render() {\n    const { line_id, loading, line_pic, name, tel } = this.state;\n    return (\n      <div class=\"App font\">\n        <h1>ลงทะเบียนเกษตรกรใหม่</h1>\n        <div>\n          <img width=\"40%\" src={line_pic}></img>\n        </div>\n        <input\n          class=\"line-id\"\n          value={\"Line ID: \" + line_id}\n          name={\"Line ID: \" + line_id}\n          disabled\n        />\n\n        <p>ชื่อเกษตรกร</p>\n        <input\n          required\n          class=\"farmer-name\"\n          placeholder=\"ชื่อ-นามสกุล\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.changeHandler}\n        />\n        <p>เบอร์โทรศัพท์</p>\n        <input\n          required\n          class=\"farmer-phone\"\n          placeholder=\"กรอกเบอร์โทรศัพท์ที่นี่ค่ะ\"\n          maxLength=\"10\"\n          type=\"tel\"\n          name=\"tel\"\n          value={tel}\n          onChange={this.changeHandler}\n        />\n        <button\n          class=\"button\"\n          type=\"submit\"\n          id=\"submitBtn\"\n          onClick={this.sendInfo}\n        >\n          ลงทะเบียน\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst liff = window.liff;\n\nexport default class qrCode extends Component {\n  initialize() {\n    function scanCode() {\n      liff.scanCode().then(result => {\n        const stringifiedResult = JSON.stringify(result);\n        alert(stringifiedResult);\n        document.getElementById(\"scanCode\").textContent = stringifiedResult;\n      });\n    }\n    liff.init({ liffId: \"1610155283-WqRpOKwB\" }, () => {});\n  }\n  render() {\n    return (\n      <div>\n        <p id=\"scanCode\"></p>\n        <p>\n          <button id=\"btnScanCode\" onclick=\"scancode()\">\n            Scan Code\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport App from \"./App.js\";\nimport qrcode from \"./qrCode.js\";\n\nexport default class MainRoute extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route patch=\"/register\" component={App} />\n          <Route patch=\"/qrcode\" component={qrcode} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Route from \"./Route.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Route />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}