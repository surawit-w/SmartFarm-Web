{"version":3,"sources":["logo.svg","App.js","qrCode.js","Route.js","serviceWorker.js","index.js"],"names":["module","exports","App","class","placeholder","disabled","type","maxLength","Component","liff","window","scanCode","then","result","stringifiedResult","JSON","stringify","alert","document","getElementById","textContent","qrCode","MainRoute","exact","patch","component","QRCode","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,6JCItBC,G,6LAEjB,OACE,yBAAKC,MAAM,YACT,wJACA,2BAAOA,MAAM,UAAUC,YAAY,UAAUC,UAAQ,IACrD,iGACA,2BAAOF,MAAM,cAAcC,YAAY,sEAAeE,KAAK,SAC3D,6GACA,2BAAOH,MAAM,eAAeC,YAAY,aAAaG,UAAU,Y,GATtCC,cCF3BC,EAAOC,OAAOD,KAEpB,SAASE,IACPF,EAAKE,WAAWC,MAAK,SAAAC,GACnB,IAAMC,EAAoBC,KAAKC,UAAUH,GACzCI,MAAMH,GACNI,SAASC,eAAe,YAAYC,YAAcN,K,IAIjCO,E,iLAEjB,OAAOV,M,GAFyBH,aCPfc,E,iLAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,MAAM,IAAIC,UAAWvB,IAClC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,MAAM,UAAUC,UAAWC,U,GANXlB,aCOnBmB,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAWd,SAASC,eAAe,SD0H7C,kBAAmBc,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.28012fdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div class=\"App font\">\n        <h1>ลงทะเบียนเกษตรกรใหม่</h1>\n        <input class=\"line-id\" placeholder=\"Line-ID\" disabled />\n        <p>ชื่อเกษตรกร</p>\n        <input class=\"farmer-name\" placeholder=\"ชื่อ-นามสกุล\" type=\"text\" />\n        <p>เบอร์โทรศัพท์</p>\n        <input class=\"farmer-phone\" placeholder=\"0803205554\" maxLength=\"10\" />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nconst liff = window.liff;\n\nfunction scanCode() {\n  liff.scanCode().then(result => {\n    const stringifiedResult = JSON.stringify(result);\n    alert(stringifiedResult);\n    document.getElementById(\"scanCode\").textContent = stringifiedResult;\n  });\n}\n\nexport default class qrCode extends Component {\n  render() {\n    return scanCode;\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport App from \"./App.js\";\nimport QRCode from \"./qrCode.js\";\n\nexport default class MainRoute extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact patch=\"/\" component={App} />\n          <Route exact patch=\"/qrcode\" component={QRCode} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from './App';\nimport Route from \"./Route.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Route />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}